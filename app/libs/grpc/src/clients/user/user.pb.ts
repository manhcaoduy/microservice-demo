// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: user/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface User {
  id: string;
  username: string;
  firstName: string;
  lastName: string;
  isActive: boolean;
}

export interface RegisterRequest {
  username: string;
  password: string;
  firstName: string;
  lastName: string;
}

export interface RegisterResponse {
  accessToken: string;
  refreshToken: string;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
}

export interface ValidateAccessTokenRequest {
  accessToken: string;
}

export interface ValidateAccessTokenResponse {
  userId: string;
}

export interface GenerateNewAccessTokenRequest {
  refreshToken: string;
}

export interface GenerateNewAccessTokenResponse {
  accessToken: string;
}

export interface GetUserByIdRequest {
  userId: string;
}

export interface GetUserByIdResponse {
  user: User | undefined;
}

export interface UpdateUserData {
  firstName?: string | undefined;
  lastName?: string | undefined;
  password?: string | undefined;
  isActive?: boolean | undefined;
}

export interface UpdateUserRequest {
  userId: string;
  userData: UpdateUserData | undefined;
}

export interface UpdateUserResponse {
  user: User | undefined;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  register(request: RegisterRequest): Observable<RegisterResponse>;

  login(request: LoginRequest): Observable<LoginResponse>;

  validateAccessToken(request: ValidateAccessTokenRequest): Observable<ValidateAccessTokenResponse>;

  generateNewAccessToken(request: GenerateNewAccessTokenRequest): Observable<GenerateNewAccessTokenResponse>;

  getUserById(request: GetUserByIdRequest): Observable<GetUserByIdResponse>;

  updateUser(request: UpdateUserRequest): Observable<UpdateUserResponse>;
}

export interface UserServiceController {
  register(request: RegisterRequest): Promise<RegisterResponse> | Observable<RegisterResponse> | RegisterResponse;

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  validateAccessToken(
    request: ValidateAccessTokenRequest,
  ): Promise<ValidateAccessTokenResponse> | Observable<ValidateAccessTokenResponse> | ValidateAccessTokenResponse;

  generateNewAccessToken(
    request: GenerateNewAccessTokenRequest,
  ):
    | Promise<GenerateNewAccessTokenResponse>
    | Observable<GenerateNewAccessTokenResponse>
    | GenerateNewAccessTokenResponse;

  getUserById(
    request: GetUserByIdRequest,
  ): Promise<GetUserByIdResponse> | Observable<GetUserByIdResponse> | GetUserByIdResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<UpdateUserResponse> | Observable<UpdateUserResponse> | UpdateUserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "login",
      "validateAccessToken",
      "generateNewAccessToken",
      "getUserById",
      "updateUser",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
